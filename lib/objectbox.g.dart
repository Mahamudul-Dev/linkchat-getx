// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/database/blocklist_schema.dart';
import 'app/database/call_schema.dart';
import 'app/database/conversatin_schema.dart';
import 'app/database/group_schema.dart';
import 'app/database/login_schema.dart';
import 'app/database/notification_schema.dart';
import 'app/database/profile_schema.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1502732444711758660),
      name: 'BlockListSchema',
      lastPropertyId: const IdUid(5, 7613804998476258755),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3091808003459423232),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4748477816926058042),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6422434786312850852),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 644584069770800536),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7613804998476258755),
            name: 'blockedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8299755802347419430),
      name: 'CallParticipant',
      lastPropertyId: const IdUid(6, 3157996868139413468),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7290945401370168586),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6384320053721870114),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2541334981658069899),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 74611152809852948),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1889196243224496992),
            name: 'isHost',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3157996868139413468),
            name: 'callId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 2709097760954684815),
            relationTarget: 'CallSchema')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5463542965904761835),
      name: 'CallSchema',
      lastPropertyId: const IdUid(7, 2721420620339686440),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1772147218687840835),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4600620197644451379),
            name: 'callId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8800616517380921277),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8677628796142623783),
            name: 'endTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2403256026520944727),
            name: 'duration',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6118841471454888792),
            name: 'mediaType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2721420620339686440),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'participants',
            srcEntity: 'CallParticipant',
            srcField: 'call')
      ]),
  ModelEntity(
      id: const IdUid(4, 3005949712864049444),
      name: 'ChatParticipant',
      lastPropertyId: const IdUid(8, 4874490736886662106),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 932641310886436310),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6528678748578015085),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9070953604391940254),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5383221522041537598),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2035639595563473522),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7023928527219399143),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2455297688511611595),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4874490736886662106),
            name: 'conversationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 3816903183955956055),
            relationTarget: 'ConversationSchema')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'message', srcEntity: 'Message', srcField: 'sender')
      ]),
  ModelEntity(
      id: const IdUid(5, 241382573815167930),
      name: 'ConversationSchema',
      lastPropertyId: const IdUid(2, 5746423711515849219),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7045147709981953787),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5746423711515849219),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'participant',
            srcEntity: 'ChatParticipant',
            srcField: 'conversation')
      ]),
  ModelEntity(
      id: const IdUid(7, 6628388654766321600),
      name: 'GroupSchema',
      lastPropertyId: const IdUid(5, 3609880440310870275),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5306567991067077624),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5814090421125970323),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4452365533223481898),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6537039012703649102),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3609880440310870275),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'participants', srcEntity: 'Participant', srcField: 'group')
      ]),
  ModelEntity(
      id: const IdUid(8, 5137569020498014724),
      name: 'LoginSchema',
      lastPropertyId: const IdUid(5, 4179011985071333843),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6679399241963218446),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7526240546688824410),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8207707413998729496),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7199300377633505120),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4179011985071333843),
            name: 'token',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 5455480206673954344),
      name: 'Message',
      lastPropertyId: const IdUid(7, 8725436463030515952),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3684769037409589763),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1418101217173326350),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 763328914994575963),
            name: 'attachment',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2131472258927401882),
            name: 'receiverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1243619455991991212),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3140033746209948533),
            name: 'timestamp',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8725436463030515952),
            name: 'senderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 3056382524223612382),
            relationTarget: 'ChatParticipant')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 9054726171995084091),
      name: 'Participant',
      lastPropertyId: const IdUid(10, 4738757765620643259),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5247341654235278758),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1048138879603467644),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1000380667814763060),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4312806110611827522),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8266520174580302224),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6483076511214763823),
            name: 'tagline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8847397507638857212),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6212829508312155628),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4400146575814376922),
            name: 'lastActive',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4738757765620643259),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 7388689952621531987),
            relationTarget: 'GroupSchema')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 3855487899131343099),
      name: 'ProfileSchema',
      lastPropertyId: const IdUid(19, 8975761658270752543),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5365528002098598511),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6076939091725873022),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 918733572222181818),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6717222096155145444),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7461219566189827712),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6596967946574213516),
            name: 'tagline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5059030989473656877),
            name: 'bio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3479808896241678621),
            name: 'dob',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7266200578145736551),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2222646028686194326),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6181935949847667881),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8213704063804797927),
            name: 'relationshipStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5998783173607100169),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 374808852839106767),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3347150375368978273),
            name: 'lastActive',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 771638841138190902),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2256200876388480032),
            name: 'followersCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 1268444187606368268),
            name: 'followingCounts',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 8975761658270752543),
            name: 'linkedCounts',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 2416490522128037181),
      name: 'NotificationSchema',
      lastPropertyId: const IdUid(6, 3525698441092032792),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7620610749341795989),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3658631524649014798),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5722366499180753080),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3614555570714528059),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3151123482919832069),
            name: 'isRead',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3525698441092032792),
            name: 'timestamp',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(14, 2416490522128037181),
      lastIndexId: const IdUid(5, 7388689952621531987),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        3977552756406304623,
        8290035999677532485,
        6486507496343484250
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1940547757994021903,
        2772365570629489636,
        4109487459112100239,
        5330415115329574565,
        3287749345782289404,
        2802996320844891985,
        2494576464396604690,
        1143237298997700838,
        4033021029115956196,
        1396412083528255255,
        3368525232821352972,
        1509649339479084451,
        1951277158389896957,
        6266399032321463039,
        3926895407204979270,
        9115498101495549772,
        6060480570129414094,
        4128102831743678793,
        3324256788288068561,
        208849621248622089,
        6869632475233839156
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    BlockListSchema: EntityDefinition<BlockListSchema>(
        model: _entities[0],
        toOneRelations: (BlockListSchema object) => [],
        toManyRelations: (BlockListSchema object) => {},
        getId: (BlockListSchema object) => object.objectId,
        setId: (BlockListSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (BlockListSchema object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final usernameOffset = fbb.writeString(object.username);
          fbb.startTable(6);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, usernameOffset);
          fbb.addInt64(4, object.blockedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BlockListSchema(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              blockedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)));

          return object;
        }),
    CallParticipant: EntityDefinition<CallParticipant>(
        model: _entities[1],
        toOneRelations: (CallParticipant object) => [object.call],
        toManyRelations: (CallParticipant object) => {},
        getId: (CallParticipant object) => object.objectId,
        setId: (CallParticipant object, int id) {
          object.objectId = id;
        },
        objectToFB: (CallParticipant object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addBool(4, object.isHost);
          fbb.addInt64(5, object.call.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CallParticipant(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              isHost: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false));
          object.call.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.call.attach(store);
          return object;
        }),
    CallSchema: EntityDefinition<CallSchema>(
        model: _entities[2],
        toOneRelations: (CallSchema object) => [],
        toManyRelations: (CallSchema object) => {
              RelInfo<CallParticipant>.toOneBacklink(6, object.objectId,
                      (CallParticipant srcObject) => srcObject.call):
                  object.participants
            },
        getId: (CallSchema object) => object.objectId,
        setId: (CallSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (CallSchema object, fb.Builder fbb) {
          final callIdOffset = fbb.writeString(object.callId);
          final mediaTypeOffset = fbb.writeString(object.mediaType);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(8);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, callIdOffset);
          fbb.addInt64(2, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.duration);
          fbb.addOffset(5, mediaTypeOffset);
          fbb.addOffset(6, statusOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CallSchema(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              callId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              startTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              endTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              duration:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              mediaType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''));
          InternalToManyAccess.setRelInfo<CallSchema>(
              object.participants,
              store,
              RelInfo<CallParticipant>.toOneBacklink(6, object.objectId,
                  (CallParticipant srcObject) => srcObject.call));
          return object;
        }),
    ChatParticipant: EntityDefinition<ChatParticipant>(
        model: _entities[3],
        toOneRelations: (ChatParticipant object) => [object.conversation],
        toManyRelations: (ChatParticipant object) => {
              RelInfo<Message>.toOneBacklink(7, object.objectId,
                  (Message srcObject) => srcObject.sender): object.message
            },
        getId: (ChatParticipant object) => object.objectId,
        setId: (ChatParticipant object, int id) {
          object.objectId = id;
        },
        objectToFB: (ChatParticipant object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          final countryOffset = fbb.writeString(object.country);
          fbb.startTable(9);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, countryOffset);
          fbb.addBool(6, object.isActive);
          fbb.addInt64(7, object.conversation.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChatParticipant(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              isActive: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false));
          object.conversation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.conversation.attach(store);
          InternalToManyAccess.setRelInfo<ChatParticipant>(
              object.message,
              store,
              RelInfo<Message>.toOneBacklink(
                  7, object.objectId, (Message srcObject) => srcObject.sender));
          return object;
        }),
    ConversationSchema: EntityDefinition<ConversationSchema>(
        model: _entities[4],
        toOneRelations: (ConversationSchema object) => [],
        toManyRelations: (ConversationSchema object) => {
              RelInfo<ChatParticipant>.toOneBacklink(8, object.objectId,
                      (ChatParticipant srcObject) => srcObject.conversation):
                  object.participant
            },
        getId: (ConversationSchema object) => object.objectId,
        setId: (ConversationSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (ConversationSchema object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ConversationSchema(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo<ConversationSchema>(
              object.participant,
              store,
              RelInfo<ChatParticipant>.toOneBacklink(8, object.objectId,
                  (ChatParticipant srcObject) => srcObject.conversation));
          return object;
        }),
    GroupSchema: EntityDefinition<GroupSchema>(
        model: _entities[5],
        toOneRelations: (GroupSchema object) => [],
        toManyRelations: (GroupSchema object) => {
              RelInfo<Participant>.toOneBacklink(10, object.objectId,
                      (Participant srcObject) => srcObject.group):
                  object.participants
            },
        getId: (GroupSchema object) => object.objectId,
        setId: (GroupSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (GroupSchema object, fb.Builder fbb) {
          final groupIdOffset = fbb.writeString(object.groupId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(6);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, groupIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, photoOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GroupSchema(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              groupId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)));
          InternalToManyAccess.setRelInfo<GroupSchema>(
              object.participants,
              store,
              RelInfo<Participant>.toOneBacklink(10, object.objectId,
                  (Participant srcObject) => srcObject.group));
          return object;
        }),
    LoginSchema: EntityDefinition<LoginSchema>(
        model: _entities[6],
        toOneRelations: (LoginSchema object) => [],
        toManyRelations: (LoginSchema object) => {},
        getId: (LoginSchema object) => object.objectId,
        setId: (LoginSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (LoginSchema object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final userNameOffset = fbb.writeString(object.userName);
          final emailOffset = fbb.writeString(object.email);
          final tokenOffset = fbb.writeString(object.token);
          fbb.startTable(6);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, userNameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, tokenOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LoginSchema(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              token: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''));

          return object;
        }),
    Message: EntityDefinition<Message>(
        model: _entities[7],
        toOneRelations: (Message object) => [object.sender],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.objectId,
        setId: (Message object, int id) {
          object.objectId = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          final attachmentOffset = fbb.writeList(
              object.attachment.map(fbb.writeString).toList(growable: false));
          final receiverIdOffset = fbb.writeString(object.receiverId);
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          fbb.startTable(8);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, contentOffset);
          fbb.addOffset(2, attachmentOffset);
          fbb.addOffset(3, receiverIdOffset);
          fbb.addOffset(4, groupIdOffset);
          fbb.addInt64(5, object.timestamp.millisecondsSinceEpoch);
          fbb.addInt64(6, object.sender.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Message(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              attachment: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              receiverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              groupId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              timestamp: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)));
          object.sender.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.sender.attach(store);
          return object;
        }),
    Participant: EntityDefinition<Participant>(
        model: _entities[8],
        toOneRelations: (Participant object) => [object.group],
        toManyRelations: (Participant object) => {},
        getId: (Participant object) => object.objectId,
        setId: (Participant object, int id) {
          object.objectId = id;
        },
        objectToFB: (Participant object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          final taglineOffset = fbb.writeString(object.tagline);
          final genderOffset = fbb.writeString(object.gender);
          final lastActiveOffset = fbb.writeString(object.lastActive);
          fbb.startTable(11);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, taglineOffset);
          fbb.addOffset(6, genderOffset);
          fbb.addBool(7, object.isActive);
          fbb.addOffset(8, lastActiveOffset);
          fbb.addInt64(9, object.group.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Participant(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              tagline: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              gender: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              isActive: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              lastActive: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''));
          object.group.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.group.attach(store);
          return object;
        }),
    ProfileSchema: EntityDefinition<ProfileSchema>(
        model: _entities[9],
        toOneRelations: (ProfileSchema object) => [],
        toManyRelations: (ProfileSchema object) => {},
        getId: (ProfileSchema object) => object.objectId,
        setId: (ProfileSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (ProfileSchema object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset =
              object.photo == null ? null : fbb.writeString(object.photo!);
          final taglineOffset =
              object.tagline == null ? null : fbb.writeString(object.tagline!);
          final bioOffset =
              object.bio == null ? null : fbb.writeString(object.bio!);
          final dobOffset =
              object.dob == null ? null : fbb.writeString(object.dob!);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final relationshipStatusOffset = object.relationshipStatus == null
              ? null
              : fbb.writeString(object.relationshipStatus!);
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final lastActiveOffset = object.lastActive == null
              ? null
              : fbb.writeString(object.lastActive!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          fbb.startTable(20);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, taglineOffset);
          fbb.addOffset(6, bioOffset);
          fbb.addOffset(7, dobOffset);
          fbb.addOffset(8, emailOffset);
          fbb.addOffset(9, phoneOffset);
          fbb.addOffset(10, countryOffset);
          fbb.addOffset(11, relationshipStatusOffset);
          fbb.addOffset(12, genderOffset);
          fbb.addBool(13, object.isActive);
          fbb.addOffset(14, lastActiveOffset);
          fbb.addOffset(15, createdAtOffset);
          fbb.addInt64(16, object.followersCount);
          fbb.addInt64(17, object.followingCounts);
          fbb.addInt64(18, object.linkedCounts);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileSchema(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              tagline: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              bio: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              dob: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              email: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              phone: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              country: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              followersCount: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36),
              followingCounts: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38),
              linkedCounts: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40),
              relationshipStatus: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              gender: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              isActive: const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false),
              lastActive: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              createdAt: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34));

          return object;
        }),
    NotificationSchema: EntityDefinition<NotificationSchema>(
        model: _entities[10],
        toOneRelations: (NotificationSchema object) => [],
        toManyRelations: (NotificationSchema object) => {},
        getId: (NotificationSchema object) => object.id,
        setId: (NotificationSchema object, int id) {
          object.id = id;
        },
        objectToFB: (NotificationSchema object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final messageOffset = fbb.writeString(object.message);
          final typeOffset = fbb.writeString(object.type);
          final timestampOffset = fbb.writeString(object.timestamp);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, messageOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addBool(4, object.isRead);
          fbb.addOffset(5, timestampOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = NotificationSchema(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              isRead: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false),
              timestamp: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [BlockListSchema] entity fields to define ObjectBox queries.
class BlockListSchema_ {
  /// see [BlockListSchema.objectId]
  static final objectId =
      QueryIntegerProperty<BlockListSchema>(_entities[0].properties[0]);

  /// see [BlockListSchema.serverId]
  static final serverId =
      QueryStringProperty<BlockListSchema>(_entities[0].properties[1]);

  /// see [BlockListSchema.uid]
  static final uid =
      QueryIntegerProperty<BlockListSchema>(_entities[0].properties[2]);

  /// see [BlockListSchema.username]
  static final username =
      QueryStringProperty<BlockListSchema>(_entities[0].properties[3]);

  /// see [BlockListSchema.blockedDate]
  static final blockedDate =
      QueryIntegerProperty<BlockListSchema>(_entities[0].properties[4]);
}

/// [CallParticipant] entity fields to define ObjectBox queries.
class CallParticipant_ {
  /// see [CallParticipant.objectId]
  static final objectId =
      QueryIntegerProperty<CallParticipant>(_entities[1].properties[0]);

  /// see [CallParticipant.serverId]
  static final serverId =
      QueryStringProperty<CallParticipant>(_entities[1].properties[1]);

  /// see [CallParticipant.uid]
  static final uid =
      QueryStringProperty<CallParticipant>(_entities[1].properties[2]);

  /// see [CallParticipant.name]
  static final name =
      QueryStringProperty<CallParticipant>(_entities[1].properties[3]);

  /// see [CallParticipant.isHost]
  static final isHost =
      QueryBooleanProperty<CallParticipant>(_entities[1].properties[4]);

  /// see [CallParticipant.call]
  static final call = QueryRelationToOne<CallParticipant, CallSchema>(
      _entities[1].properties[5]);
}

/// [CallSchema] entity fields to define ObjectBox queries.
class CallSchema_ {
  /// see [CallSchema.objectId]
  static final objectId =
      QueryIntegerProperty<CallSchema>(_entities[2].properties[0]);

  /// see [CallSchema.callId]
  static final callId =
      QueryStringProperty<CallSchema>(_entities[2].properties[1]);

  /// see [CallSchema.startTime]
  static final startTime =
      QueryIntegerProperty<CallSchema>(_entities[2].properties[2]);

  /// see [CallSchema.endTime]
  static final endTime =
      QueryIntegerProperty<CallSchema>(_entities[2].properties[3]);

  /// see [CallSchema.duration]
  static final duration =
      QueryIntegerProperty<CallSchema>(_entities[2].properties[4]);

  /// see [CallSchema.mediaType]
  static final mediaType =
      QueryStringProperty<CallSchema>(_entities[2].properties[5]);

  /// see [CallSchema.status]
  static final status =
      QueryStringProperty<CallSchema>(_entities[2].properties[6]);
}

/// [ChatParticipant] entity fields to define ObjectBox queries.
class ChatParticipant_ {
  /// see [ChatParticipant.objectId]
  static final objectId =
      QueryIntegerProperty<ChatParticipant>(_entities[3].properties[0]);

  /// see [ChatParticipant.serverId]
  static final serverId =
      QueryStringProperty<ChatParticipant>(_entities[3].properties[1]);

  /// see [ChatParticipant.uid]
  static final uid =
      QueryIntegerProperty<ChatParticipant>(_entities[3].properties[2]);

  /// see [ChatParticipant.name]
  static final name =
      QueryStringProperty<ChatParticipant>(_entities[3].properties[3]);

  /// see [ChatParticipant.photo]
  static final photo =
      QueryStringProperty<ChatParticipant>(_entities[3].properties[4]);

  /// see [ChatParticipant.country]
  static final country =
      QueryStringProperty<ChatParticipant>(_entities[3].properties[5]);

  /// see [ChatParticipant.isActive]
  static final isActive =
      QueryBooleanProperty<ChatParticipant>(_entities[3].properties[6]);

  /// see [ChatParticipant.conversation]
  static final conversation =
      QueryRelationToOne<ChatParticipant, ConversationSchema>(
          _entities[3].properties[7]);
}

/// [ConversationSchema] entity fields to define ObjectBox queries.
class ConversationSchema_ {
  /// see [ConversationSchema.objectId]
  static final objectId =
      QueryIntegerProperty<ConversationSchema>(_entities[4].properties[0]);

  /// see [ConversationSchema.name]
  static final name =
      QueryStringProperty<ConversationSchema>(_entities[4].properties[1]);
}

/// [GroupSchema] entity fields to define ObjectBox queries.
class GroupSchema_ {
  /// see [GroupSchema.objectId]
  static final objectId =
      QueryIntegerProperty<GroupSchema>(_entities[5].properties[0]);

  /// see [GroupSchema.groupId]
  static final groupId =
      QueryStringProperty<GroupSchema>(_entities[5].properties[1]);

  /// see [GroupSchema.name]
  static final name =
      QueryStringProperty<GroupSchema>(_entities[5].properties[2]);

  /// see [GroupSchema.photo]
  static final photo =
      QueryStringProperty<GroupSchema>(_entities[5].properties[3]);

  /// see [GroupSchema.createdAt]
  static final createdAt =
      QueryIntegerProperty<GroupSchema>(_entities[5].properties[4]);
}

/// [LoginSchema] entity fields to define ObjectBox queries.
class LoginSchema_ {
  /// see [LoginSchema.objectId]
  static final objectId =
      QueryIntegerProperty<LoginSchema>(_entities[6].properties[0]);

  /// see [LoginSchema.serverId]
  static final serverId =
      QueryStringProperty<LoginSchema>(_entities[6].properties[1]);

  /// see [LoginSchema.userName]
  static final userName =
      QueryStringProperty<LoginSchema>(_entities[6].properties[2]);

  /// see [LoginSchema.email]
  static final email =
      QueryStringProperty<LoginSchema>(_entities[6].properties[3]);

  /// see [LoginSchema.token]
  static final token =
      QueryStringProperty<LoginSchema>(_entities[6].properties[4]);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// see [Message.objectId]
  static final objectId =
      QueryIntegerProperty<Message>(_entities[7].properties[0]);

  /// see [Message.content]
  static final content =
      QueryStringProperty<Message>(_entities[7].properties[1]);

  /// see [Message.attachment]
  static final attachment =
      QueryStringVectorProperty<Message>(_entities[7].properties[2]);

  /// see [Message.receiverId]
  static final receiverId =
      QueryStringProperty<Message>(_entities[7].properties[3]);

  /// see [Message.groupId]
  static final groupId =
      QueryStringProperty<Message>(_entities[7].properties[4]);

  /// see [Message.timestamp]
  static final timestamp =
      QueryIntegerProperty<Message>(_entities[7].properties[5]);

  /// see [Message.sender]
  static final sender =
      QueryRelationToOne<Message, ChatParticipant>(_entities[7].properties[6]);
}

/// [Participant] entity fields to define ObjectBox queries.
class Participant_ {
  /// see [Participant.objectId]
  static final objectId =
      QueryIntegerProperty<Participant>(_entities[8].properties[0]);

  /// see [Participant.serverId]
  static final serverId =
      QueryStringProperty<Participant>(_entities[8].properties[1]);

  /// see [Participant.uid]
  static final uid =
      QueryIntegerProperty<Participant>(_entities[8].properties[2]);

  /// see [Participant.name]
  static final name =
      QueryStringProperty<Participant>(_entities[8].properties[3]);

  /// see [Participant.photo]
  static final photo =
      QueryStringProperty<Participant>(_entities[8].properties[4]);

  /// see [Participant.tagline]
  static final tagline =
      QueryStringProperty<Participant>(_entities[8].properties[5]);

  /// see [Participant.gender]
  static final gender =
      QueryStringProperty<Participant>(_entities[8].properties[6]);

  /// see [Participant.isActive]
  static final isActive =
      QueryBooleanProperty<Participant>(_entities[8].properties[7]);

  /// see [Participant.lastActive]
  static final lastActive =
      QueryStringProperty<Participant>(_entities[8].properties[8]);

  /// see [Participant.group]
  static final group =
      QueryRelationToOne<Participant, GroupSchema>(_entities[8].properties[9]);
}

/// [ProfileSchema] entity fields to define ObjectBox queries.
class ProfileSchema_ {
  /// see [ProfileSchema.objectId]
  static final objectId =
      QueryIntegerProperty<ProfileSchema>(_entities[9].properties[0]);

  /// see [ProfileSchema.serverId]
  static final serverId =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[1]);

  /// see [ProfileSchema.uid]
  static final uid =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[2]);

  /// see [ProfileSchema.name]
  static final name =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[3]);

  /// see [ProfileSchema.photo]
  static final photo =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[4]);

  /// see [ProfileSchema.tagline]
  static final tagline =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[5]);

  /// see [ProfileSchema.bio]
  static final bio =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[6]);

  /// see [ProfileSchema.dob]
  static final dob =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[7]);

  /// see [ProfileSchema.email]
  static final email =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[8]);

  /// see [ProfileSchema.phone]
  static final phone =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[9]);

  /// see [ProfileSchema.country]
  static final country =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[10]);

  /// see [ProfileSchema.relationshipStatus]
  static final relationshipStatus =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[11]);

  /// see [ProfileSchema.gender]
  static final gender =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[12]);

  /// see [ProfileSchema.isActive]
  static final isActive =
      QueryBooleanProperty<ProfileSchema>(_entities[9].properties[13]);

  /// see [ProfileSchema.lastActive]
  static final lastActive =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[14]);

  /// see [ProfileSchema.createdAt]
  static final createdAt =
      QueryStringProperty<ProfileSchema>(_entities[9].properties[15]);

  /// see [ProfileSchema.followersCount]
  static final followersCount =
      QueryIntegerProperty<ProfileSchema>(_entities[9].properties[16]);

  /// see [ProfileSchema.followingCounts]
  static final followingCounts =
      QueryIntegerProperty<ProfileSchema>(_entities[9].properties[17]);

  /// see [ProfileSchema.linkedCounts]
  static final linkedCounts =
      QueryIntegerProperty<ProfileSchema>(_entities[9].properties[18]);
}

/// [NotificationSchema] entity fields to define ObjectBox queries.
class NotificationSchema_ {
  /// see [NotificationSchema.id]
  static final id =
      QueryIntegerProperty<NotificationSchema>(_entities[10].properties[0]);

  /// see [NotificationSchema.title]
  static final title =
      QueryStringProperty<NotificationSchema>(_entities[10].properties[1]);

  /// see [NotificationSchema.message]
  static final message =
      QueryStringProperty<NotificationSchema>(_entities[10].properties[2]);

  /// see [NotificationSchema.type]
  static final type =
      QueryStringProperty<NotificationSchema>(_entities[10].properties[3]);

  /// see [NotificationSchema.isRead]
  static final isRead =
      QueryBooleanProperty<NotificationSchema>(_entities[10].properties[4]);

  /// see [NotificationSchema.timestamp]
  static final timestamp =
      QueryStringProperty<NotificationSchema>(_entities[10].properties[5]);
}
