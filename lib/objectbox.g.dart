// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/database/blocklist_schema.dart';
import 'app/database/call_schema.dart';
import 'app/database/conversatin_schema.dart';
import 'app/database/group_schema.dart';
import 'app/database/login_schema.dart';
import 'app/database/notification_schema.dart';
import 'app/database/profile_schema.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1006091579991908967),
      name: 'BlockListSchema',
      lastPropertyId: const IdUid(5, 8263930421383297038),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 720738840162505531),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4625449555195090618),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6044637922932958769),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4184179886936199702),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8263930421383297038),
            name: 'blockedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8260360441169781549),
      name: 'CallParticipant',
      lastPropertyId: const IdUid(6, 5956138684718539004),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4301389634150718239),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6001387574703606088),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7993755370953123631),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3078886903197331178),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8287292530945474189),
            name: 'isHost',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5956138684718539004),
            name: 'callId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6405144638250490728),
            relationTarget: 'CallSchema')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1348520936250446046),
      name: 'CallSchema',
      lastPropertyId: const IdUid(7, 6708904549227888878),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1103952937632543227),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6156129351364767892),
            name: 'callId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5228709715569414736),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4497159830262775672),
            name: 'endTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5161663545337634476),
            name: 'duration',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8447276498378647347),
            name: 'mediaType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6708904549227888878),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'participants',
            srcEntity: 'CallParticipant',
            srcField: 'call')
      ]),
  ModelEntity(
      id: const IdUid(4, 3033644725630547497),
      name: 'ChatParticipantSchema',
      lastPropertyId: const IdUid(6, 9126206257676544900),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3976365551317187612),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 507757174922767450),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5810474777365858524),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1260054944893863887),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7052013469695130878),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9126206257676544900),
            name: 'country',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'conversation',
            srcEntity: 'ConversationSchema',
            srcField: 'participant'),
        ModelBacklink(
            name: 'messageSchema',
            srcEntity: 'MessageSchema',
            srcField: 'sender')
      ]),
  ModelEntity(
      id: const IdUid(5, 5184066317626067991),
      name: 'ConversationSchema',
      lastPropertyId: const IdUid(6, 2027916550590132254),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6946897254831405448),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4353540223859466695),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4877305509040275130),
            name: 'receiverServerId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 248737675237596978),
            name: 'creatorServerId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4002521079947062350),
            name: 'receiverId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 3054606116029627785),
            relationTarget: 'ChatParticipantSchema'),
        ModelProperty(
            id: const IdUid(6, 2027916550590132254),
            name: 'senderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 8151130641637345508),
            relationTarget: 'ChatParticipantSchema')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 3328626769970957182),
            name: 'participant',
            targetId: const IdUid(4, 3033644725630547497)),
        ModelRelation(
            id: const IdUid(2, 1708645724144874611),
            name: 'messages',
            targetId: const IdUid(8, 4670708009748381746))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3399592598773373212),
      name: 'GroupSchema',
      lastPropertyId: const IdUid(5, 6597714747997913674),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8796348425284286893),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3250810206218392715),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1389026739174052124),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8658556870664592824),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6597714747997913674),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'participants', srcEntity: 'Participant', srcField: 'group')
      ]),
  ModelEntity(
      id: const IdUid(7, 4444973127470870519),
      name: 'LoginSchema',
      lastPropertyId: const IdUid(5, 2514932347143477877),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7550030765702221431),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5412514092197208366),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4348527653593435137),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6324823884111508492),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2514932347143477877),
            name: 'token',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 4670708009748381746),
      name: 'MessageSchema',
      lastPropertyId: const IdUid(12, 1077068501541079673),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6779648236955941038),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1718898792975453637),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1278879755705439611),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1491290443119965123),
            name: 'senderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 4586230816503996722),
            relationTarget: 'ChatParticipantSchema'),
        ModelProperty(
            id: const IdUid(5, 5804901042859210391),
            name: 'receiverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 226911633320515450),
            name: 'conversationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 8201682932259155510),
            relationTarget: 'ConversationSchema'),
        ModelProperty(
            id: const IdUid(7, 3602567472214853022),
            name: 'replyMessageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 1057809813119505851),
            relationTarget: 'ReplyMessage'),
        ModelProperty(
            id: const IdUid(9, 4172050599057549094),
            name: 'messageType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4741048189954242757),
            name: 'voiceMessageDuration',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7241033798435693669),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1077068501541079673),
            name: 'reactionsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 56811857815422770),
            relationTarget: 'ReactionSchema')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 5435783608969888388),
      name: 'NotificationSchema',
      lastPropertyId: const IdUid(6, 8893898824894910967),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5001452679521765491),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5984664526006389116),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 258832835656445040),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5733549803892864613),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6981933463171438057),
            name: 'isRead',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8893898824894910967),
            name: 'timestamp',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 5535228784166158145),
      name: 'Participant',
      lastPropertyId: const IdUid(10, 8338094021163795933),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8987201266672491635),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6066532235868952065),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2504207618766319043),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2198775712253081765),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7499310364353717373),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7787817590802395623),
            name: 'tagline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1540873251910624705),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7083309258147726351),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 9056645655867320091),
            name: 'lastActive',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8338094021163795933),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 8787687464744604343),
            relationTarget: 'GroupSchema')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 7529940443000940129),
      name: 'ProfileSchema',
      lastPropertyId: const IdUid(19, 4365571947909206871),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3918448068583870637),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6737468032280839289),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8530359983370670192),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6415258037261172272),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8912080882806821618),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2696530508583765657),
            name: 'tagline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6387996071999094775),
            name: 'bio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4332228932355788059),
            name: 'dob',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3742646069214588075),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 142840969476506886),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8687578499592949206),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3172005239265415623),
            name: 'followersCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2940618518705126872),
            name: 'followingCounts',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7038514144193524799),
            name: 'linkedCounts',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 1337614864774769376),
            name: 'relationshipStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1625610407810567698),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 1071322103337310257),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7404050093352616435),
            name: 'lastActive',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4365571947909206871),
            name: 'createdAt',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 4452230885642653942),
      name: 'ReplyMessage',
      lastPropertyId: const IdUid(7, 7314823735112761215),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7890061791979451048),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1512110468961577253),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2327137051464369207),
            name: 'replyBy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 341605876702755065),
            name: 'replyTo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 832754507515363827),
            name: 'messageType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2078366577167256715),
            name: 'voiceMessageDuration',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7314823735112761215),
            name: 'messageSchemaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 1588408638271391436),
            relationTarget: 'MessageSchema')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 6182342856094685363),
      name: 'ReactionSchema',
      lastPropertyId: const IdUid(4, 4781605143068636464),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8175714106250383252),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8778866167276021183),
            name: 'reactions',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4764378642200462758),
            name: 'reactedUserIds',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4781605143068636464),
            name: 'messageSchemaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 1065452905654936505),
            relationTarget: 'MessageSchema')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(14, 6182342856094685363),
      lastIndexId: const IdUid(16, 4586230816503996722),
      lastRelationId: const IdUid(2, 1708645724144874611),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [2687039153339483124],
      retiredIndexUids: const [
        7649214007628390909,
        1102776509429843296,
        6153884362631719058,
        9191319147121440117,
        6181542461845678284
      ],
      retiredPropertyUids: const [
        8661398602757902182,
        5611691731443863450,
        7147706975693739136,
        7034963042093949552,
        2046454134820532993
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    BlockListSchema: EntityDefinition<BlockListSchema>(
        model: _entities[0],
        toOneRelations: (BlockListSchema object) => [],
        toManyRelations: (BlockListSchema object) => {},
        getId: (BlockListSchema object) => object.objectId,
        setId: (BlockListSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (BlockListSchema object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final usernameOffset = fbb.writeString(object.username);
          fbb.startTable(6);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, usernameOffset);
          fbb.addInt64(4, object.blockedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final blockedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = BlockListSchema(
              objectId: objectIdParam,
              serverId: serverIdParam,
              uid: uidParam,
              username: usernameParam,
              blockedDate: blockedDateParam);

          return object;
        }),
    CallParticipant: EntityDefinition<CallParticipant>(
        model: _entities[1],
        toOneRelations: (CallParticipant object) => [object.call],
        toManyRelations: (CallParticipant object) => {},
        getId: (CallParticipant object) => object.objectId,
        setId: (CallParticipant object, int id) {
          object.objectId = id;
        },
        objectToFB: (CallParticipant object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addBool(4, object.isHost);
          fbb.addInt64(5, object.call.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final isHostParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = CallParticipant(
              objectId: objectIdParam,
              serverId: serverIdParam,
              uid: uidParam,
              name: nameParam,
              isHost: isHostParam);
          object.call.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.call.attach(store);
          return object;
        }),
    CallSchema: EntityDefinition<CallSchema>(
        model: _entities[2],
        toOneRelations: (CallSchema object) => [],
        toManyRelations: (CallSchema object) => {
              RelInfo<CallParticipant>.toOneBacklink(6, object.objectId,
                      (CallParticipant srcObject) => srcObject.call):
                  object.participants
            },
        getId: (CallSchema object) => object.objectId,
        setId: (CallSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (CallSchema object, fb.Builder fbb) {
          final callIdOffset = fbb.writeString(object.callId);
          final mediaTypeOffset = fbb.writeString(object.mediaType);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(8);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, callIdOffset);
          fbb.addInt64(2, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.duration);
          fbb.addOffset(5, mediaTypeOffset);
          fbb.addOffset(6, statusOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final callIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final endTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final durationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final mediaTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = CallSchema(
              objectId: objectIdParam,
              callId: callIdParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              duration: durationParam,
              mediaType: mediaTypeParam,
              status: statusParam);
          InternalToManyAccess.setRelInfo<CallSchema>(
              object.participants,
              store,
              RelInfo<CallParticipant>.toOneBacklink(6, object.objectId,
                  (CallParticipant srcObject) => srcObject.call));
          return object;
        }),
    ChatParticipantSchema: EntityDefinition<ChatParticipantSchema>(
        model: _entities[3],
        toOneRelations: (ChatParticipantSchema object) => [],
        toManyRelations: (ChatParticipantSchema object) => {
              RelInfo<ConversationSchema>.toManyBacklink(1, object.objectId):
                  object.conversation,
              RelInfo<MessageSchema>.toOneBacklink(4, object.objectId,
                      (MessageSchema srcObject) => srcObject.sender):
                  object.messageSchema
            },
        getId: (ChatParticipantSchema object) => object.objectId,
        setId: (ChatParticipantSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (ChatParticipantSchema object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          final countryOffset = fbb.writeString(object.country);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, countryOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final photoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = ChatParticipantSchema(
              objectId: objectIdParam,
              serverId: serverIdParam,
              uid: uidParam,
              name: nameParam,
              photo: photoParam,
              country: countryParam);
          InternalToManyAccess.setRelInfo<ChatParticipantSchema>(
              object.conversation,
              store,
              RelInfo<ConversationSchema>.toManyBacklink(1, object.objectId));
          InternalToManyAccess.setRelInfo<ChatParticipantSchema>(
              object.messageSchema,
              store,
              RelInfo<MessageSchema>.toOneBacklink(4, object.objectId,
                  (MessageSchema srcObject) => srcObject.sender));
          return object;
        }),
    ConversationSchema: EntityDefinition<ConversationSchema>(
        model: _entities[4],
        toOneRelations: (ConversationSchema object) =>
            [object.receiver, object.sender],
        toManyRelations: (ConversationSchema object) => {
              RelInfo<ConversationSchema>.toMany(1, object.objectId):
                  object.participant,
              RelInfo<ConversationSchema>.toMany(2, object.objectId):
                  object.messages
            },
        getId: (ConversationSchema object) => object.objectId,
        setId: (ConversationSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (ConversationSchema object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final receiverServerIdOffset =
              fbb.writeString(object.receiverServerId);
          final creatorServerIdOffset = fbb.writeString(object.creatorServerId);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, receiverServerIdOffset);
          fbb.addOffset(3, creatorServerIdOffset);
          fbb.addInt64(4, object.receiver.targetId);
          fbb.addInt64(5, object.sender.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final receiverServerIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final creatorServerIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = ConversationSchema(
              objectId: objectIdParam,
              name: nameParam,
              receiverServerId: receiverServerIdParam,
              creatorServerId: creatorServerIdParam);
          object.receiver.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.receiver.attach(store);
          object.sender.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.sender.attach(store);
          InternalToManyAccess.setRelInfo<ConversationSchema>(
              object.participant,
              store,
              RelInfo<ConversationSchema>.toMany(1, object.objectId));
          InternalToManyAccess.setRelInfo<ConversationSchema>(object.messages,
              store, RelInfo<ConversationSchema>.toMany(2, object.objectId));
          return object;
        }),
    GroupSchema: EntityDefinition<GroupSchema>(
        model: _entities[5],
        toOneRelations: (GroupSchema object) => [],
        toManyRelations: (GroupSchema object) => {
              RelInfo<Participant>.toOneBacklink(10, object.objectId,
                      (Participant srcObject) => srcObject.group):
                  object.participants
            },
        getId: (GroupSchema object) => object.objectId,
        setId: (GroupSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (GroupSchema object, fb.Builder fbb) {
          final groupIdOffset = fbb.writeString(object.groupId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(6);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, groupIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, photoOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final groupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final photoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = GroupSchema(
              objectId: objectIdParam,
              groupId: groupIdParam,
              name: nameParam,
              photo: photoParam,
              createdAt: createdAtParam);
          InternalToManyAccess.setRelInfo<GroupSchema>(
              object.participants,
              store,
              RelInfo<Participant>.toOneBacklink(10, object.objectId,
                  (Participant srcObject) => srcObject.group));
          return object;
        }),
    LoginSchema: EntityDefinition<LoginSchema>(
        model: _entities[6],
        toOneRelations: (LoginSchema object) => [],
        toManyRelations: (LoginSchema object) => {},
        getId: (LoginSchema object) => object.objectId,
        setId: (LoginSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (LoginSchema object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final userNameOffset = fbb.writeString(object.userName);
          final emailOffset = fbb.writeString(object.email);
          final tokenOffset = fbb.writeString(object.token);
          fbb.startTable(6);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, userNameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, tokenOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final tokenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = LoginSchema(
              objectId: objectIdParam,
              serverId: serverIdParam,
              userName: userNameParam,
              email: emailParam,
              token: tokenParam);

          return object;
        }),
    MessageSchema: EntityDefinition<MessageSchema>(
        model: _entities[7],
        toOneRelations: (MessageSchema object) => [
              object.sender,
              object.conversation,
              object.replyMessage,
              object.reactions
            ],
        toManyRelations: (MessageSchema object) => {},
        getId: (MessageSchema object) => object.id,
        setId: (MessageSchema object, int id) {
          object.id = id;
        },
        objectToFB: (MessageSchema object, fb.Builder fbb) {
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final receiverIdOffset = object.receiverId == null
              ? null
              : fbb.writeString(object.receiverId!);
          final messageTypeOffset = object.messageType == null
              ? null
              : fbb.writeString(object.messageType!);
          final voiceMessageDurationOffset = object.voiceMessageDuration == null
              ? null
              : fbb.writeString(object.voiceMessageDuration!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageOffset);
          fbb.addOffset(2, createdAtOffset);
          fbb.addInt64(3, object.sender.targetId);
          fbb.addOffset(4, receiverIdOffset);
          fbb.addInt64(5, object.conversation.targetId);
          fbb.addInt64(6, object.replyMessage.targetId);
          fbb.addOffset(8, messageTypeOffset);
          fbb.addOffset(9, voiceMessageDurationOffset);
          fbb.addOffset(10, statusOffset);
          fbb.addInt64(11, object.reactions.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final receiverIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final messageTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final voiceMessageDurationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final object = MessageSchema(
              id: idParam,
              message: messageParam,
              createdAt: createdAtParam,
              receiverId: receiverIdParam,
              messageType: messageTypeParam,
              voiceMessageDuration: voiceMessageDurationParam,
              status: statusParam);
          object.sender.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.sender.attach(store);
          object.conversation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.conversation.attach(store);
          object.replyMessage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.replyMessage.attach(store);
          object.reactions.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.reactions.attach(store);
          return object;
        }),
    NotificationSchema: EntityDefinition<NotificationSchema>(
        model: _entities[8],
        toOneRelations: (NotificationSchema object) => [],
        toManyRelations: (NotificationSchema object) => {},
        getId: (NotificationSchema object) => object.id,
        setId: (NotificationSchema object, int id) {
          object.id = id;
        },
        objectToFB: (NotificationSchema object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final messageOffset = fbb.writeString(object.message);
          final typeOffset = fbb.writeString(object.type);
          final timestampOffset = fbb.writeString(object.timestamp);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, messageOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addBool(4, object.isRead);
          fbb.addOffset(5, timestampOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final isReadParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final timestampParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = NotificationSchema(
              id: idParam,
              title: titleParam,
              message: messageParam,
              type: typeParam,
              isRead: isReadParam,
              timestamp: timestampParam);

          return object;
        }),
    Participant: EntityDefinition<Participant>(
        model: _entities[9],
        toOneRelations: (Participant object) => [object.group],
        toManyRelations: (Participant object) => {},
        getId: (Participant object) => object.objectId,
        setId: (Participant object, int id) {
          object.objectId = id;
        },
        objectToFB: (Participant object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          final taglineOffset = fbb.writeString(object.tagline);
          final genderOffset = fbb.writeString(object.gender);
          final lastActiveOffset = fbb.writeString(object.lastActive);
          fbb.startTable(11);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, taglineOffset);
          fbb.addOffset(6, genderOffset);
          fbb.addBool(7, object.isActive);
          fbb.addOffset(8, lastActiveOffset);
          fbb.addInt64(9, object.group.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final photoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final taglineParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final lastActiveParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final object = Participant(
              objectId: objectIdParam,
              serverId: serverIdParam,
              uid: uidParam,
              name: nameParam,
              photo: photoParam,
              tagline: taglineParam,
              gender: genderParam,
              isActive: isActiveParam,
              lastActive: lastActiveParam);
          object.group.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.group.attach(store);
          return object;
        }),
    ProfileSchema: EntityDefinition<ProfileSchema>(
        model: _entities[10],
        toOneRelations: (ProfileSchema object) => [],
        toManyRelations: (ProfileSchema object) => {},
        getId: (ProfileSchema object) => object.objectId,
        setId: (ProfileSchema object, int id) {
          object.objectId = id;
        },
        objectToFB: (ProfileSchema object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset =
              object.photo == null ? null : fbb.writeString(object.photo!);
          final taglineOffset =
              object.tagline == null ? null : fbb.writeString(object.tagline!);
          final bioOffset =
              object.bio == null ? null : fbb.writeString(object.bio!);
          final dobOffset =
              object.dob == null ? null : fbb.writeString(object.dob!);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final relationshipStatusOffset = object.relationshipStatus == null
              ? null
              : fbb.writeString(object.relationshipStatus!);
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final lastActiveOffset = object.lastActive == null
              ? null
              : fbb.writeString(object.lastActive!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          fbb.startTable(20);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, taglineOffset);
          fbb.addOffset(6, bioOffset);
          fbb.addOffset(7, dobOffset);
          fbb.addOffset(8, emailOffset);
          fbb.addOffset(9, phoneOffset);
          fbb.addOffset(10, countryOffset);
          fbb.addInt64(11, object.followersCount);
          fbb.addInt64(12, object.followingCounts);
          fbb.addInt64(13, object.linkedCounts);
          fbb.addOffset(14, relationshipStatusOffset);
          fbb.addOffset(15, genderOffset);
          fbb.addBool(16, object.isActive);
          fbb.addOffset(17, lastActiveOffset);
          fbb.addOffset(18, createdAtOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final serverIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final photoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final taglineParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final bioParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final dobParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final followersCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final followingCountsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final linkedCountsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final relationshipStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false);
          final lastActiveParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final object = ProfileSchema(
              objectId: objectIdParam,
              serverId: serverIdParam,
              uid: uidParam,
              name: nameParam,
              photo: photoParam,
              tagline: taglineParam,
              bio: bioParam,
              dob: dobParam,
              email: emailParam,
              phone: phoneParam,
              country: countryParam,
              followersCount: followersCountParam,
              followingCounts: followingCountsParam,
              linkedCounts: linkedCountsParam,
              relationshipStatus: relationshipStatusParam,
              gender: genderParam,
              isActive: isActiveParam,
              lastActive: lastActiveParam,
              createdAt: createdAtParam);

          return object;
        }),
    ReplyMessage: EntityDefinition<ReplyMessage>(
        model: _entities[11],
        toOneRelations: (ReplyMessage object) => [object.messageSchema],
        toManyRelations: (ReplyMessage object) => {},
        getId: (ReplyMessage object) => object.id,
        setId: (ReplyMessage object, int id) {
          object.id = id;
        },
        objectToFB: (ReplyMessage object, fb.Builder fbb) {
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          final replyByOffset =
              object.replyBy == null ? null : fbb.writeString(object.replyBy!);
          final replyToOffset =
              object.replyTo == null ? null : fbb.writeString(object.replyTo!);
          final messageTypeOffset = object.messageType == null
              ? null
              : fbb.writeString(object.messageType!);
          final voiceMessageDurationOffset = object.voiceMessageDuration == null
              ? null
              : fbb.writeString(object.voiceMessageDuration!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageOffset);
          fbb.addOffset(2, replyByOffset);
          fbb.addOffset(3, replyToOffset);
          fbb.addOffset(4, messageTypeOffset);
          fbb.addOffset(5, voiceMessageDurationOffset);
          fbb.addInt64(6, object.messageSchema.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final replyByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final replyToParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final messageTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final voiceMessageDurationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = ReplyMessage(
              id: idParam,
              message: messageParam,
              replyBy: replyByParam,
              replyTo: replyToParam,
              messageType: messageTypeParam,
              voiceMessageDuration: voiceMessageDurationParam);
          object.messageSchema.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.messageSchema.attach(store);
          return object;
        }),
    ReactionSchema: EntityDefinition<ReactionSchema>(
        model: _entities[12],
        toOneRelations: (ReactionSchema object) => [object.messageSchema],
        toManyRelations: (ReactionSchema object) => {},
        getId: (ReactionSchema object) => object.id,
        setId: (ReactionSchema object, int id) {
          object.id = id;
        },
        objectToFB: (ReactionSchema object, fb.Builder fbb) {
          final reactionsOffset = object.reactions == null
              ? null
              : fbb.writeList(object.reactions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final reactedUserIdsOffset = object.reactedUserIds == null
              ? null
              : fbb.writeList(object.reactedUserIds!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, reactionsOffset);
          fbb.addOffset(2, reactedUserIdsOffset);
          fbb.addInt64(3, object.messageSchema.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final reactionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 6);
          final reactedUserIdsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = ReactionSchema(
              id: idParam,
              reactions: reactionsParam,
              reactedUserIds: reactedUserIdsParam);
          object.messageSchema.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.messageSchema.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [BlockListSchema] entity fields to define ObjectBox queries.
class BlockListSchema_ {
  /// see [BlockListSchema.objectId]
  static final objectId =
      QueryIntegerProperty<BlockListSchema>(_entities[0].properties[0]);

  /// see [BlockListSchema.serverId]
  static final serverId =
      QueryStringProperty<BlockListSchema>(_entities[0].properties[1]);

  /// see [BlockListSchema.uid]
  static final uid =
      QueryIntegerProperty<BlockListSchema>(_entities[0].properties[2]);

  /// see [BlockListSchema.username]
  static final username =
      QueryStringProperty<BlockListSchema>(_entities[0].properties[3]);

  /// see [BlockListSchema.blockedDate]
  static final blockedDate =
      QueryIntegerProperty<BlockListSchema>(_entities[0].properties[4]);
}

/// [CallParticipant] entity fields to define ObjectBox queries.
class CallParticipant_ {
  /// see [CallParticipant.objectId]
  static final objectId =
      QueryIntegerProperty<CallParticipant>(_entities[1].properties[0]);

  /// see [CallParticipant.serverId]
  static final serverId =
      QueryStringProperty<CallParticipant>(_entities[1].properties[1]);

  /// see [CallParticipant.uid]
  static final uid =
      QueryStringProperty<CallParticipant>(_entities[1].properties[2]);

  /// see [CallParticipant.name]
  static final name =
      QueryStringProperty<CallParticipant>(_entities[1].properties[3]);

  /// see [CallParticipant.isHost]
  static final isHost =
      QueryBooleanProperty<CallParticipant>(_entities[1].properties[4]);

  /// see [CallParticipant.call]
  static final call = QueryRelationToOne<CallParticipant, CallSchema>(
      _entities[1].properties[5]);
}

/// [CallSchema] entity fields to define ObjectBox queries.
class CallSchema_ {
  /// see [CallSchema.objectId]
  static final objectId =
      QueryIntegerProperty<CallSchema>(_entities[2].properties[0]);

  /// see [CallSchema.callId]
  static final callId =
      QueryStringProperty<CallSchema>(_entities[2].properties[1]);

  /// see [CallSchema.startTime]
  static final startTime =
      QueryIntegerProperty<CallSchema>(_entities[2].properties[2]);

  /// see [CallSchema.endTime]
  static final endTime =
      QueryIntegerProperty<CallSchema>(_entities[2].properties[3]);

  /// see [CallSchema.duration]
  static final duration =
      QueryIntegerProperty<CallSchema>(_entities[2].properties[4]);

  /// see [CallSchema.mediaType]
  static final mediaType =
      QueryStringProperty<CallSchema>(_entities[2].properties[5]);

  /// see [CallSchema.status]
  static final status =
      QueryStringProperty<CallSchema>(_entities[2].properties[6]);
}

/// [ChatParticipantSchema] entity fields to define ObjectBox queries.
class ChatParticipantSchema_ {
  /// see [ChatParticipantSchema.objectId]
  static final objectId =
      QueryIntegerProperty<ChatParticipantSchema>(_entities[3].properties[0]);

  /// see [ChatParticipantSchema.serverId]
  static final serverId =
      QueryStringProperty<ChatParticipantSchema>(_entities[3].properties[1]);

  /// see [ChatParticipantSchema.uid]
  static final uid =
      QueryStringProperty<ChatParticipantSchema>(_entities[3].properties[2]);

  /// see [ChatParticipantSchema.name]
  static final name =
      QueryStringProperty<ChatParticipantSchema>(_entities[3].properties[3]);

  /// see [ChatParticipantSchema.photo]
  static final photo =
      QueryStringProperty<ChatParticipantSchema>(_entities[3].properties[4]);

  /// see [ChatParticipantSchema.country]
  static final country =
      QueryStringProperty<ChatParticipantSchema>(_entities[3].properties[5]);
}

/// [ConversationSchema] entity fields to define ObjectBox queries.
class ConversationSchema_ {
  /// see [ConversationSchema.objectId]
  static final objectId =
      QueryIntegerProperty<ConversationSchema>(_entities[4].properties[0]);

  /// see [ConversationSchema.name]
  static final name =
      QueryStringProperty<ConversationSchema>(_entities[4].properties[1]);

  /// see [ConversationSchema.receiverServerId]
  static final receiverServerId =
      QueryStringProperty<ConversationSchema>(_entities[4].properties[2]);

  /// see [ConversationSchema.creatorServerId]
  static final creatorServerId =
      QueryStringProperty<ConversationSchema>(_entities[4].properties[3]);

  /// see [ConversationSchema.receiver]
  static final receiver =
      QueryRelationToOne<ConversationSchema, ChatParticipantSchema>(
          _entities[4].properties[4]);

  /// see [ConversationSchema.sender]
  static final sender =
      QueryRelationToOne<ConversationSchema, ChatParticipantSchema>(
          _entities[4].properties[5]);

  /// see [ConversationSchema.participant]
  static final participant =
      QueryRelationToMany<ConversationSchema, ChatParticipantSchema>(
          _entities[4].relations[0]);

  /// see [ConversationSchema.messages]
  static final messages =
      QueryRelationToMany<ConversationSchema, MessageSchema>(
          _entities[4].relations[1]);
}

/// [GroupSchema] entity fields to define ObjectBox queries.
class GroupSchema_ {
  /// see [GroupSchema.objectId]
  static final objectId =
      QueryIntegerProperty<GroupSchema>(_entities[5].properties[0]);

  /// see [GroupSchema.groupId]
  static final groupId =
      QueryStringProperty<GroupSchema>(_entities[5].properties[1]);

  /// see [GroupSchema.name]
  static final name =
      QueryStringProperty<GroupSchema>(_entities[5].properties[2]);

  /// see [GroupSchema.photo]
  static final photo =
      QueryStringProperty<GroupSchema>(_entities[5].properties[3]);

  /// see [GroupSchema.createdAt]
  static final createdAt =
      QueryIntegerProperty<GroupSchema>(_entities[5].properties[4]);
}

/// [LoginSchema] entity fields to define ObjectBox queries.
class LoginSchema_ {
  /// see [LoginSchema.objectId]
  static final objectId =
      QueryIntegerProperty<LoginSchema>(_entities[6].properties[0]);

  /// see [LoginSchema.serverId]
  static final serverId =
      QueryStringProperty<LoginSchema>(_entities[6].properties[1]);

  /// see [LoginSchema.userName]
  static final userName =
      QueryStringProperty<LoginSchema>(_entities[6].properties[2]);

  /// see [LoginSchema.email]
  static final email =
      QueryStringProperty<LoginSchema>(_entities[6].properties[3]);

  /// see [LoginSchema.token]
  static final token =
      QueryStringProperty<LoginSchema>(_entities[6].properties[4]);
}

/// [MessageSchema] entity fields to define ObjectBox queries.
class MessageSchema_ {
  /// see [MessageSchema.id]
  static final id =
      QueryIntegerProperty<MessageSchema>(_entities[7].properties[0]);

  /// see [MessageSchema.message]
  static final message =
      QueryStringProperty<MessageSchema>(_entities[7].properties[1]);

  /// see [MessageSchema.createdAt]
  static final createdAt =
      QueryStringProperty<MessageSchema>(_entities[7].properties[2]);

  /// see [MessageSchema.sender]
  static final sender =
      QueryRelationToOne<MessageSchema, ChatParticipantSchema>(
          _entities[7].properties[3]);

  /// see [MessageSchema.receiverId]
  static final receiverId =
      QueryStringProperty<MessageSchema>(_entities[7].properties[4]);

  /// see [MessageSchema.conversation]
  static final conversation =
      QueryRelationToOne<MessageSchema, ConversationSchema>(
          _entities[7].properties[5]);

  /// see [MessageSchema.replyMessage]
  static final replyMessage = QueryRelationToOne<MessageSchema, ReplyMessage>(
      _entities[7].properties[6]);

  /// see [MessageSchema.messageType]
  static final messageType =
      QueryStringProperty<MessageSchema>(_entities[7].properties[7]);

  /// see [MessageSchema.voiceMessageDuration]
  static final voiceMessageDuration =
      QueryStringProperty<MessageSchema>(_entities[7].properties[8]);

  /// see [MessageSchema.status]
  static final status =
      QueryStringProperty<MessageSchema>(_entities[7].properties[9]);

  /// see [MessageSchema.reactions]
  static final reactions = QueryRelationToOne<MessageSchema, ReactionSchema>(
      _entities[7].properties[10]);
}

/// [NotificationSchema] entity fields to define ObjectBox queries.
class NotificationSchema_ {
  /// see [NotificationSchema.id]
  static final id =
      QueryIntegerProperty<NotificationSchema>(_entities[8].properties[0]);

  /// see [NotificationSchema.title]
  static final title =
      QueryStringProperty<NotificationSchema>(_entities[8].properties[1]);

  /// see [NotificationSchema.message]
  static final message =
      QueryStringProperty<NotificationSchema>(_entities[8].properties[2]);

  /// see [NotificationSchema.type]
  static final type =
      QueryStringProperty<NotificationSchema>(_entities[8].properties[3]);

  /// see [NotificationSchema.isRead]
  static final isRead =
      QueryBooleanProperty<NotificationSchema>(_entities[8].properties[4]);

  /// see [NotificationSchema.timestamp]
  static final timestamp =
      QueryStringProperty<NotificationSchema>(_entities[8].properties[5]);
}

/// [Participant] entity fields to define ObjectBox queries.
class Participant_ {
  /// see [Participant.objectId]
  static final objectId =
      QueryIntegerProperty<Participant>(_entities[9].properties[0]);

  /// see [Participant.serverId]
  static final serverId =
      QueryStringProperty<Participant>(_entities[9].properties[1]);

  /// see [Participant.uid]
  static final uid =
      QueryStringProperty<Participant>(_entities[9].properties[2]);

  /// see [Participant.name]
  static final name =
      QueryStringProperty<Participant>(_entities[9].properties[3]);

  /// see [Participant.photo]
  static final photo =
      QueryStringProperty<Participant>(_entities[9].properties[4]);

  /// see [Participant.tagline]
  static final tagline =
      QueryStringProperty<Participant>(_entities[9].properties[5]);

  /// see [Participant.gender]
  static final gender =
      QueryStringProperty<Participant>(_entities[9].properties[6]);

  /// see [Participant.isActive]
  static final isActive =
      QueryBooleanProperty<Participant>(_entities[9].properties[7]);

  /// see [Participant.lastActive]
  static final lastActive =
      QueryStringProperty<Participant>(_entities[9].properties[8]);

  /// see [Participant.group]
  static final group =
      QueryRelationToOne<Participant, GroupSchema>(_entities[9].properties[9]);
}

/// [ProfileSchema] entity fields to define ObjectBox queries.
class ProfileSchema_ {
  /// see [ProfileSchema.objectId]
  static final objectId =
      QueryIntegerProperty<ProfileSchema>(_entities[10].properties[0]);

  /// see [ProfileSchema.serverId]
  static final serverId =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[1]);

  /// see [ProfileSchema.uid]
  static final uid =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[2]);

  /// see [ProfileSchema.name]
  static final name =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[3]);

  /// see [ProfileSchema.photo]
  static final photo =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[4]);

  /// see [ProfileSchema.tagline]
  static final tagline =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[5]);

  /// see [ProfileSchema.bio]
  static final bio =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[6]);

  /// see [ProfileSchema.dob]
  static final dob =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[7]);

  /// see [ProfileSchema.email]
  static final email =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[8]);

  /// see [ProfileSchema.phone]
  static final phone =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[9]);

  /// see [ProfileSchema.country]
  static final country =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[10]);

  /// see [ProfileSchema.followersCount]
  static final followersCount =
      QueryIntegerProperty<ProfileSchema>(_entities[10].properties[11]);

  /// see [ProfileSchema.followingCounts]
  static final followingCounts =
      QueryIntegerProperty<ProfileSchema>(_entities[10].properties[12]);

  /// see [ProfileSchema.linkedCounts]
  static final linkedCounts =
      QueryIntegerProperty<ProfileSchema>(_entities[10].properties[13]);

  /// see [ProfileSchema.relationshipStatus]
  static final relationshipStatus =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[14]);

  /// see [ProfileSchema.gender]
  static final gender =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[15]);

  /// see [ProfileSchema.isActive]
  static final isActive =
      QueryBooleanProperty<ProfileSchema>(_entities[10].properties[16]);

  /// see [ProfileSchema.lastActive]
  static final lastActive =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[17]);

  /// see [ProfileSchema.createdAt]
  static final createdAt =
      QueryStringProperty<ProfileSchema>(_entities[10].properties[18]);
}

/// [ReplyMessage] entity fields to define ObjectBox queries.
class ReplyMessage_ {
  /// see [ReplyMessage.id]
  static final id =
      QueryIntegerProperty<ReplyMessage>(_entities[11].properties[0]);

  /// see [ReplyMessage.message]
  static final message =
      QueryStringProperty<ReplyMessage>(_entities[11].properties[1]);

  /// see [ReplyMessage.replyBy]
  static final replyBy =
      QueryStringProperty<ReplyMessage>(_entities[11].properties[2]);

  /// see [ReplyMessage.replyTo]
  static final replyTo =
      QueryStringProperty<ReplyMessage>(_entities[11].properties[3]);

  /// see [ReplyMessage.messageType]
  static final messageType =
      QueryStringProperty<ReplyMessage>(_entities[11].properties[4]);

  /// see [ReplyMessage.voiceMessageDuration]
  static final voiceMessageDuration =
      QueryStringProperty<ReplyMessage>(_entities[11].properties[5]);

  /// see [ReplyMessage.messageSchema]
  static final messageSchema = QueryRelationToOne<ReplyMessage, MessageSchema>(
      _entities[11].properties[6]);
}

/// [ReactionSchema] entity fields to define ObjectBox queries.
class ReactionSchema_ {
  /// see [ReactionSchema.id]
  static final id =
      QueryIntegerProperty<ReactionSchema>(_entities[12].properties[0]);

  /// see [ReactionSchema.reactions]
  static final reactions =
      QueryStringVectorProperty<ReactionSchema>(_entities[12].properties[1]);

  /// see [ReactionSchema.reactedUserIds]
  static final reactedUserIds =
      QueryStringVectorProperty<ReactionSchema>(_entities[12].properties[2]);

  /// see [ReactionSchema.messageSchema]
  static final messageSchema =
      QueryRelationToOne<ReactionSchema, MessageSchema>(
          _entities[12].properties[3]);
}
