// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/database/blocklist_db.dart';
import 'app/database/call_db.dart';
import 'app/database/chat_db.dart';
import 'app/database/group_db.dart';
import 'app/database/profile_db.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3186227760629210722),
      name: 'BlockedUser',
      lastPropertyId: const IdUid(5, 2200810974922979695),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3250001493275735359),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4759588681306607790),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8659758685491347737),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8258812888643578992),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2200810974922979695),
            name: 'blockedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8239648096423448884),
      name: 'Call',
      lastPropertyId: const IdUid(7, 5796715996643826462),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8087273198893859459),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6216139844110119108),
            name: 'callId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3839312314536592916),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 591724963541086009),
            name: 'endTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7009060435658403125),
            name: 'duration',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5574508928564316985),
            name: 'mediaType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5796715996643826462),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'participants',
            srcEntity: 'CallParticipant',
            srcField: 'call')
      ]),
  ModelEntity(
      id: const IdUid(3, 7840614916228830186),
      name: 'CallParticipant',
      lastPropertyId: const IdUid(6, 3337024087768771066),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 897229677647990705),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3812220377531672440),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9098397644357370100),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4667488316469281693),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2767057460638201728),
            name: 'isHost',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3337024087768771066),
            name: 'callId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 2728460147671640667),
            relationTarget: 'Call')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 3192217011446078797),
      name: 'ChatParticipant',
      lastPropertyId: const IdUid(8, 3983325896197196434),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1095947567929823370),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5226371409010802612),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 425084494613191638),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2710187988511274458),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4273404560604557606),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 259223397324173444),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5954222452161767894),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3983325896197196434),
            name: 'conversationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 3925427140036503993),
            relationTarget: 'Conversation')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'message', srcEntity: 'Message', srcField: 'sender')
      ]),
  ModelEntity(
      id: const IdUid(5, 1985099699604219208),
      name: 'Conversation',
      lastPropertyId: const IdUid(2, 8444767209774800476),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6339953363637299210),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8444767209774800476),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'participant',
            srcEntity: 'ChatParticipant',
            srcField: 'conversation')
      ]),
  ModelEntity(
      id: const IdUid(6, 6607612567605664512),
      name: 'Follow',
      lastPropertyId: const IdUid(8, 7016745506633397807),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7677191042140968021),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7833711238381892876),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1329427352479445756),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8826191229458833564),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7017727300028392390),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5112863948835744768),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5365066936599761389),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7016745506633397807),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 5007332974929314760),
            relationTarget: 'Profile')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 4740549941581533618),
      name: 'Group',
      lastPropertyId: const IdUid(5, 7584380973931041360),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6107503548238423106),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8511967085073585153),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6328638868460881703),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6417168168623471576),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7584380973931041360),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'participants', srcEntity: 'Participant', srcField: 'group')
      ]),
  ModelEntity(
      id: const IdUid(8, 3534649597296540028),
      name: 'Message',
      lastPropertyId: const IdUid(7, 4043764624221419635),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2554539629455160591),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6082888500554375860),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6863128075130816393),
            name: 'attachment',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8967010547806654797),
            name: 'senderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 4258670617851926882),
            relationTarget: 'ChatParticipant'),
        ModelProperty(
            id: const IdUid(5, 5950395249939898957),
            name: 'receiverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 348203840683320740),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4043764624221419635),
            name: 'timestamp',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 7232083230412326210),
      name: 'Participant',
      lastPropertyId: const IdUid(10, 9087332896474422032),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6081458799569731884),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9027399748451378831),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1132651072116322078),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8346258961320967525),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1505283416333331844),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2649843281749892037),
            name: 'tagline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2775213752800900627),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3991535512978688703),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6071558369893398337),
            name: 'lastActive',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 9087332896474422032),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 7784526491509234335),
            relationTarget: 'Group')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 6469001632077361422),
      name: 'Profile',
      lastPropertyId: const IdUid(15, 4803659458041966464),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2657678815673459401),
            name: 'objectId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8452077550366842918),
            name: 'serverId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1917648982461552139),
            name: 'uid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6919884696640011361),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6221487985599435715),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6403406205085792527),
            name: 'tagline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1147959631056999338),
            name: 'dob',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3074587677862267945),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4213552065241482153),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3623198587705920512),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5834747202117559627),
            name: 'relationshipStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6820990420092640242),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6612209105334428253),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8417175202539257194),
            name: 'lastActive',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4803659458041966464),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'followers', srcEntity: 'Follow', srcField: 'profile'),
        ModelBacklink(
            name: 'following', srcEntity: 'Follow', srcField: 'profile')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(10, 6469001632077361422),
      lastIndexId: const IdUid(5, 7784526491509234335),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    BlockedUser: EntityDefinition<BlockedUser>(
        model: _entities[0],
        toOneRelations: (BlockedUser object) => [],
        toManyRelations: (BlockedUser object) => {},
        getId: (BlockedUser object) => object.objectId,
        setId: (BlockedUser object, int id) {
          object.objectId = id;
        },
        objectToFB: (BlockedUser object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final usernameOffset = fbb.writeString(object.username);
          fbb.startTable(6);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, usernameOffset);
          fbb.addInt64(4, object.blockedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BlockedUser(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              blockedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)));

          return object;
        }),
    Call: EntityDefinition<Call>(
        model: _entities[1],
        toOneRelations: (Call object) => [],
        toManyRelations: (Call object) => {
              RelInfo<CallParticipant>.toOneBacklink(6, object.objectId,
                      (CallParticipant srcObject) => srcObject.call):
                  object.participants
            },
        getId: (Call object) => object.objectId,
        setId: (Call object, int id) {
          object.objectId = id;
        },
        objectToFB: (Call object, fb.Builder fbb) {
          final callIdOffset = fbb.writeString(object.callId);
          final mediaTypeOffset = fbb.writeString(object.mediaType);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(8);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, callIdOffset);
          fbb.addInt64(2, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.duration);
          fbb.addOffset(5, mediaTypeOffset);
          fbb.addOffset(6, statusOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Call(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              callId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              startTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              endTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              duration:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              mediaType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''));
          InternalToManyAccess.setRelInfo<Call>(
              object.participants,
              store,
              RelInfo<CallParticipant>.toOneBacklink(6, object.objectId,
                  (CallParticipant srcObject) => srcObject.call));
          return object;
        }),
    CallParticipant: EntityDefinition<CallParticipant>(
        model: _entities[2],
        toOneRelations: (CallParticipant object) => [object.call],
        toManyRelations: (CallParticipant object) => {},
        getId: (CallParticipant object) => object.objectId,
        setId: (CallParticipant object, int id) {
          object.objectId = id;
        },
        objectToFB: (CallParticipant object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addBool(4, object.isHost);
          fbb.addInt64(5, object.call.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CallParticipant(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              isHost: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false));
          object.call.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.call.attach(store);
          return object;
        }),
    ChatParticipant: EntityDefinition<ChatParticipant>(
        model: _entities[3],
        toOneRelations: (ChatParticipant object) => [object.conversation],
        toManyRelations: (ChatParticipant object) => {
              RelInfo<Message>.toOneBacklink(4, object.objectId,
                  (Message srcObject) => srcObject.sender): object.message
            },
        getId: (ChatParticipant object) => object.objectId,
        setId: (ChatParticipant object, int id) {
          object.objectId = id;
        },
        objectToFB: (ChatParticipant object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          final countryOffset = fbb.writeString(object.country);
          fbb.startTable(9);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, countryOffset);
          fbb.addBool(6, object.isActive);
          fbb.addInt64(7, object.conversation.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChatParticipant(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              isActive: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false));
          object.conversation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.conversation.attach(store);
          InternalToManyAccess.setRelInfo<ChatParticipant>(
              object.message,
              store,
              RelInfo<Message>.toOneBacklink(
                  4, object.objectId, (Message srcObject) => srcObject.sender));
          return object;
        }),
    Conversation: EntityDefinition<Conversation>(
        model: _entities[4],
        toOneRelations: (Conversation object) => [],
        toManyRelations: (Conversation object) => {
              RelInfo<ChatParticipant>.toOneBacklink(8, object.objectId,
                      (ChatParticipant srcObject) => srcObject.conversation):
                  object.participant
            },
        getId: (Conversation object) => object.objectId,
        setId: (Conversation object, int id) {
          object.objectId = id;
        },
        objectToFB: (Conversation object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Conversation(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo<Conversation>(
              object.participant,
              store,
              RelInfo<ChatParticipant>.toOneBacklink(8, object.objectId,
                  (ChatParticipant srcObject) => srcObject.conversation));
          return object;
        }),
    Follow: EntityDefinition<Follow>(
        model: _entities[5],
        toOneRelations: (Follow object) => [object.profile],
        toManyRelations: (Follow object) => {},
        getId: (Follow object) => object.objectId,
        setId: (Follow object, int id) {
          object.objectId = id;
        },
        objectToFB: (Follow object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          final countryOffset = fbb.writeString(object.country);
          fbb.startTable(9);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, countryOffset);
          fbb.addBool(6, object.isActive);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Follow(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              isActive: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false));
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    Group: EntityDefinition<Group>(
        model: _entities[6],
        toOneRelations: (Group object) => [],
        toManyRelations: (Group object) => {
              RelInfo<Participant>.toOneBacklink(10, object.objectId,
                      (Participant srcObject) => srcObject.group):
                  object.participants
            },
        getId: (Group object) => object.objectId,
        setId: (Group object, int id) {
          object.objectId = id;
        },
        objectToFB: (Group object, fb.Builder fbb) {
          final groupIdOffset = fbb.writeString(object.groupId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(6);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, groupIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, photoOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Group(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              groupId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)));
          InternalToManyAccess.setRelInfo<Group>(
              object.participants,
              store,
              RelInfo<Participant>.toOneBacklink(10, object.objectId,
                  (Participant srcObject) => srcObject.group));
          return object;
        }),
    Message: EntityDefinition<Message>(
        model: _entities[7],
        toOneRelations: (Message object) => [object.sender],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.objectId,
        setId: (Message object, int id) {
          object.objectId = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          final attachmentOffset = fbb.writeList(
              object.attachment.map(fbb.writeString).toList(growable: false));
          final receiverIdOffset = fbb.writeString(object.receiverId);
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          fbb.startTable(8);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, contentOffset);
          fbb.addOffset(2, attachmentOffset);
          fbb.addInt64(3, object.sender.targetId);
          fbb.addOffset(4, receiverIdOffset);
          fbb.addOffset(5, groupIdOffset);
          fbb.addInt64(6, object.timestamp.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Message(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              attachment: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              receiverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              groupId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              timestamp: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)));
          object.sender.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.sender.attach(store);
          return object;
        }),
    Participant: EntityDefinition<Participant>(
        model: _entities[8],
        toOneRelations: (Participant object) => [object.group],
        toManyRelations: (Participant object) => {},
        getId: (Participant object) => object.objectId,
        setId: (Participant object, int id) {
          object.objectId = id;
        },
        objectToFB: (Participant object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          final taglineOffset = fbb.writeString(object.tagline);
          final genderOffset = fbb.writeString(object.gender);
          final lastActiveOffset = fbb.writeString(object.lastActive);
          fbb.startTable(11);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, taglineOffset);
          fbb.addOffset(6, genderOffset);
          fbb.addBool(7, object.isActive);
          fbb.addOffset(8, lastActiveOffset);
          fbb.addInt64(9, object.group.targetId);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Participant(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              tagline: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              gender: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              isActive: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              lastActive: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''));
          object.group.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.group.attach(store);
          return object;
        }),
    Profile: EntityDefinition<Profile>(
        model: _entities[9],
        toOneRelations: (Profile object) => [],
        toManyRelations: (Profile object) => {
              RelInfo<Follow>.toOneBacklink(8, object.objectId,
                  (Follow srcObject) => srcObject.profile): object.followers,
              RelInfo<Follow>.toOneBacklink(8, object.objectId,
                  (Follow srcObject) => srcObject.profile): object.following
            },
        getId: (Profile object) => object.objectId,
        setId: (Profile object, int id) {
          object.objectId = id;
        },
        objectToFB: (Profile object, fb.Builder fbb) {
          final serverIdOffset = fbb.writeString(object.serverId);
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          final taglineOffset = fbb.writeString(object.tagline);
          final dobOffset = fbb.writeString(object.dob);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset = fbb.writeString(object.phone);
          final countryOffset = fbb.writeString(object.country);
          final relationshipStatusOffset =
              fbb.writeString(object.relationshipStatus);
          final genderOffset = fbb.writeString(object.gender);
          final lastActiveOffset = fbb.writeString(object.lastActive);
          fbb.startTable(16);
          fbb.addInt64(0, object.objectId);
          fbb.addOffset(1, serverIdOffset);
          fbb.addInt64(2, object.uid);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, photoOffset);
          fbb.addOffset(5, taglineOffset);
          fbb.addOffset(6, dobOffset);
          fbb.addOffset(7, emailOffset);
          fbb.addOffset(8, phoneOffset);
          fbb.addOffset(9, countryOffset);
          fbb.addOffset(10, relationshipStatusOffset);
          fbb.addOffset(11, genderOffset);
          fbb.addBool(12, object.isActive);
          fbb.addOffset(13, lastActiveOffset);
          fbb.addInt64(14, object.createdAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Profile(
              objectId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              tagline: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              dob: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              country: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              relationshipStatus: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              gender: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              isActive: const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false),
              lastActive: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              createdAt: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0)));
          InternalToManyAccess.setRelInfo<Profile>(
              object.followers,
              store,
              RelInfo<Follow>.toOneBacklink(
                  8, object.objectId, (Follow srcObject) => srcObject.profile));
          InternalToManyAccess.setRelInfo<Profile>(
              object.following,
              store,
              RelInfo<Follow>.toOneBacklink(
                  8, object.objectId, (Follow srcObject) => srcObject.profile));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [BlockedUser] entity fields to define ObjectBox queries.
class BlockedUser_ {
  /// see [BlockedUser.objectId]
  static final objectId =
      QueryIntegerProperty<BlockedUser>(_entities[0].properties[0]);

  /// see [BlockedUser.serverId]
  static final serverId =
      QueryStringProperty<BlockedUser>(_entities[0].properties[1]);

  /// see [BlockedUser.uid]
  static final uid =
      QueryIntegerProperty<BlockedUser>(_entities[0].properties[2]);

  /// see [BlockedUser.username]
  static final username =
      QueryStringProperty<BlockedUser>(_entities[0].properties[3]);

  /// see [BlockedUser.blockedDate]
  static final blockedDate =
      QueryIntegerProperty<BlockedUser>(_entities[0].properties[4]);
}

/// [Call] entity fields to define ObjectBox queries.
class Call_ {
  /// see [Call.objectId]
  static final objectId =
      QueryIntegerProperty<Call>(_entities[1].properties[0]);

  /// see [Call.callId]
  static final callId = QueryStringProperty<Call>(_entities[1].properties[1]);

  /// see [Call.startTime]
  static final startTime =
      QueryIntegerProperty<Call>(_entities[1].properties[2]);

  /// see [Call.endTime]
  static final endTime = QueryIntegerProperty<Call>(_entities[1].properties[3]);

  /// see [Call.duration]
  static final duration =
      QueryIntegerProperty<Call>(_entities[1].properties[4]);

  /// see [Call.mediaType]
  static final mediaType =
      QueryStringProperty<Call>(_entities[1].properties[5]);

  /// see [Call.status]
  static final status = QueryStringProperty<Call>(_entities[1].properties[6]);
}

/// [CallParticipant] entity fields to define ObjectBox queries.
class CallParticipant_ {
  /// see [CallParticipant.objectId]
  static final objectId =
      QueryIntegerProperty<CallParticipant>(_entities[2].properties[0]);

  /// see [CallParticipant.serverId]
  static final serverId =
      QueryStringProperty<CallParticipant>(_entities[2].properties[1]);

  /// see [CallParticipant.uid]
  static final uid =
      QueryStringProperty<CallParticipant>(_entities[2].properties[2]);

  /// see [CallParticipant.name]
  static final name =
      QueryStringProperty<CallParticipant>(_entities[2].properties[3]);

  /// see [CallParticipant.isHost]
  static final isHost =
      QueryBooleanProperty<CallParticipant>(_entities[2].properties[4]);

  /// see [CallParticipant.call]
  static final call =
      QueryRelationToOne<CallParticipant, Call>(_entities[2].properties[5]);
}

/// [ChatParticipant] entity fields to define ObjectBox queries.
class ChatParticipant_ {
  /// see [ChatParticipant.objectId]
  static final objectId =
      QueryIntegerProperty<ChatParticipant>(_entities[3].properties[0]);

  /// see [ChatParticipant.serverId]
  static final serverId =
      QueryStringProperty<ChatParticipant>(_entities[3].properties[1]);

  /// see [ChatParticipant.uid]
  static final uid =
      QueryIntegerProperty<ChatParticipant>(_entities[3].properties[2]);

  /// see [ChatParticipant.name]
  static final name =
      QueryStringProperty<ChatParticipant>(_entities[3].properties[3]);

  /// see [ChatParticipant.photo]
  static final photo =
      QueryStringProperty<ChatParticipant>(_entities[3].properties[4]);

  /// see [ChatParticipant.country]
  static final country =
      QueryStringProperty<ChatParticipant>(_entities[3].properties[5]);

  /// see [ChatParticipant.isActive]
  static final isActive =
      QueryBooleanProperty<ChatParticipant>(_entities[3].properties[6]);

  /// see [ChatParticipant.conversation]
  static final conversation = QueryRelationToOne<ChatParticipant, Conversation>(
      _entities[3].properties[7]);
}

/// [Conversation] entity fields to define ObjectBox queries.
class Conversation_ {
  /// see [Conversation.objectId]
  static final objectId =
      QueryIntegerProperty<Conversation>(_entities[4].properties[0]);

  /// see [Conversation.name]
  static final name =
      QueryStringProperty<Conversation>(_entities[4].properties[1]);
}

/// [Follow] entity fields to define ObjectBox queries.
class Follow_ {
  /// see [Follow.objectId]
  static final objectId =
      QueryIntegerProperty<Follow>(_entities[5].properties[0]);

  /// see [Follow.serverId]
  static final serverId =
      QueryStringProperty<Follow>(_entities[5].properties[1]);

  /// see [Follow.uid]
  static final uid = QueryIntegerProperty<Follow>(_entities[5].properties[2]);

  /// see [Follow.name]
  static final name = QueryStringProperty<Follow>(_entities[5].properties[3]);

  /// see [Follow.photo]
  static final photo = QueryStringProperty<Follow>(_entities[5].properties[4]);

  /// see [Follow.country]
  static final country =
      QueryStringProperty<Follow>(_entities[5].properties[5]);

  /// see [Follow.isActive]
  static final isActive =
      QueryBooleanProperty<Follow>(_entities[5].properties[6]);

  /// see [Follow.profile]
  static final profile =
      QueryRelationToOne<Follow, Profile>(_entities[5].properties[7]);
}

/// [Group] entity fields to define ObjectBox queries.
class Group_ {
  /// see [Group.objectId]
  static final objectId =
      QueryIntegerProperty<Group>(_entities[6].properties[0]);

  /// see [Group.groupId]
  static final groupId = QueryStringProperty<Group>(_entities[6].properties[1]);

  /// see [Group.name]
  static final name = QueryStringProperty<Group>(_entities[6].properties[2]);

  /// see [Group.photo]
  static final photo = QueryStringProperty<Group>(_entities[6].properties[3]);

  /// see [Group.createdAt]
  static final createdAt =
      QueryIntegerProperty<Group>(_entities[6].properties[4]);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// see [Message.objectId]
  static final objectId =
      QueryIntegerProperty<Message>(_entities[7].properties[0]);

  /// see [Message.content]
  static final content =
      QueryStringProperty<Message>(_entities[7].properties[1]);

  /// see [Message.attachment]
  static final attachment =
      QueryStringVectorProperty<Message>(_entities[7].properties[2]);

  /// see [Message.sender]
  static final sender =
      QueryRelationToOne<Message, ChatParticipant>(_entities[7].properties[3]);

  /// see [Message.receiverId]
  static final receiverId =
      QueryStringProperty<Message>(_entities[7].properties[4]);

  /// see [Message.groupId]
  static final groupId =
      QueryStringProperty<Message>(_entities[7].properties[5]);

  /// see [Message.timestamp]
  static final timestamp =
      QueryIntegerProperty<Message>(_entities[7].properties[6]);
}

/// [Participant] entity fields to define ObjectBox queries.
class Participant_ {
  /// see [Participant.objectId]
  static final objectId =
      QueryIntegerProperty<Participant>(_entities[8].properties[0]);

  /// see [Participant.serverId]
  static final serverId =
      QueryStringProperty<Participant>(_entities[8].properties[1]);

  /// see [Participant.uid]
  static final uid =
      QueryIntegerProperty<Participant>(_entities[8].properties[2]);

  /// see [Participant.name]
  static final name =
      QueryStringProperty<Participant>(_entities[8].properties[3]);

  /// see [Participant.photo]
  static final photo =
      QueryStringProperty<Participant>(_entities[8].properties[4]);

  /// see [Participant.tagline]
  static final tagline =
      QueryStringProperty<Participant>(_entities[8].properties[5]);

  /// see [Participant.gender]
  static final gender =
      QueryStringProperty<Participant>(_entities[8].properties[6]);

  /// see [Participant.isActive]
  static final isActive =
      QueryBooleanProperty<Participant>(_entities[8].properties[7]);

  /// see [Participant.lastActive]
  static final lastActive =
      QueryStringProperty<Participant>(_entities[8].properties[8]);

  /// see [Participant.group]
  static final group =
      QueryRelationToOne<Participant, Group>(_entities[8].properties[9]);
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// see [Profile.objectId]
  static final objectId =
      QueryIntegerProperty<Profile>(_entities[9].properties[0]);

  /// see [Profile.serverId]
  static final serverId =
      QueryStringProperty<Profile>(_entities[9].properties[1]);

  /// see [Profile.uid]
  static final uid = QueryIntegerProperty<Profile>(_entities[9].properties[2]);

  /// see [Profile.name]
  static final name = QueryStringProperty<Profile>(_entities[9].properties[3]);

  /// see [Profile.photo]
  static final photo = QueryStringProperty<Profile>(_entities[9].properties[4]);

  /// see [Profile.tagline]
  static final tagline =
      QueryStringProperty<Profile>(_entities[9].properties[5]);

  /// see [Profile.dob]
  static final dob = QueryStringProperty<Profile>(_entities[9].properties[6]);

  /// see [Profile.email]
  static final email = QueryStringProperty<Profile>(_entities[9].properties[7]);

  /// see [Profile.phone]
  static final phone = QueryStringProperty<Profile>(_entities[9].properties[8]);

  /// see [Profile.country]
  static final country =
      QueryStringProperty<Profile>(_entities[9].properties[9]);

  /// see [Profile.relationshipStatus]
  static final relationshipStatus =
      QueryStringProperty<Profile>(_entities[9].properties[10]);

  /// see [Profile.gender]
  static final gender =
      QueryStringProperty<Profile>(_entities[9].properties[11]);

  /// see [Profile.isActive]
  static final isActive =
      QueryBooleanProperty<Profile>(_entities[9].properties[12]);

  /// see [Profile.lastActive]
  static final lastActive =
      QueryStringProperty<Profile>(_entities[9].properties[13]);

  /// see [Profile.createdAt]
  static final createdAt =
      QueryIntegerProperty<Profile>(_entities[9].properties[14]);
}
